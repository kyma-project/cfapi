// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/kyma-project/cfapi/controllers/installable"
)

type EventRecorder struct {
	EventStub        func(installable.EventType, string, string)
	eventMutex       sync.RWMutex
	eventArgsForCall []struct {
		arg1 installable.EventType
		arg2 string
		arg3 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EventRecorder) Event(arg1 installable.EventType, arg2 string, arg3 string) {
	fake.eventMutex.Lock()
	fake.eventArgsForCall = append(fake.eventArgsForCall, struct {
		arg1 installable.EventType
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EventStub
	fake.recordInvocation("Event", []interface{}{arg1, arg2, arg3})
	fake.eventMutex.Unlock()
	if stub != nil {
		fake.EventStub(arg1, arg2, arg3)
	}
}

func (fake *EventRecorder) EventCallCount() int {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return len(fake.eventArgsForCall)
}

func (fake *EventRecorder) EventCalls(stub func(installable.EventType, string, string)) {
	fake.eventMutex.Lock()
	defer fake.eventMutex.Unlock()
	fake.EventStub = stub
}

func (fake *EventRecorder) EventArgsForCall(i int) (installable.EventType, string, string) {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	argsForCall := fake.eventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *EventRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EventRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ installable.EventRecorder = new(EventRecorder)
