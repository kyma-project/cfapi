// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/kyma-project/cfapi/api/v1alpha1"
	"github.com/kyma-project/cfapi/controllers/installable"
)

type HelmValuesProvider struct {
	GetValuesStub        func(context.Context, v1alpha1.InstallationConfig) (map[string]any, error)
	getValuesMutex       sync.RWMutex
	getValuesArgsForCall []struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
	}
	getValuesReturns struct {
		result1 map[string]any
		result2 error
	}
	getValuesReturnsOnCall map[int]struct {
		result1 map[string]any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HelmValuesProvider) GetValues(arg1 context.Context, arg2 v1alpha1.InstallationConfig) (map[string]any, error) {
	fake.getValuesMutex.Lock()
	ret, specificReturn := fake.getValuesReturnsOnCall[len(fake.getValuesArgsForCall)]
	fake.getValuesArgsForCall = append(fake.getValuesArgsForCall, struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
	}{arg1, arg2})
	stub := fake.GetValuesStub
	fakeReturns := fake.getValuesReturns
	fake.recordInvocation("GetValues", []interface{}{arg1, arg2})
	fake.getValuesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HelmValuesProvider) GetValuesCallCount() int {
	fake.getValuesMutex.RLock()
	defer fake.getValuesMutex.RUnlock()
	return len(fake.getValuesArgsForCall)
}

func (fake *HelmValuesProvider) GetValuesCalls(stub func(context.Context, v1alpha1.InstallationConfig) (map[string]any, error)) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = stub
}

func (fake *HelmValuesProvider) GetValuesArgsForCall(i int) (context.Context, v1alpha1.InstallationConfig) {
	fake.getValuesMutex.RLock()
	defer fake.getValuesMutex.RUnlock()
	argsForCall := fake.getValuesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HelmValuesProvider) GetValuesReturns(result1 map[string]any, result2 error) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = nil
	fake.getValuesReturns = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *HelmValuesProvider) GetValuesReturnsOnCall(i int, result1 map[string]any, result2 error) {
	fake.getValuesMutex.Lock()
	defer fake.getValuesMutex.Unlock()
	fake.GetValuesStub = nil
	if fake.getValuesReturnsOnCall == nil {
		fake.getValuesReturnsOnCall = make(map[int]struct {
			result1 map[string]any
			result2 error
		})
	}
	fake.getValuesReturnsOnCall[i] = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *HelmValuesProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HelmValuesProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ installable.HelmValuesProvider = new(HelmValuesProvider)
