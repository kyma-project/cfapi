// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/kyma-project/cfapi/api/v1alpha1"
	"github.com/kyma-project/cfapi/controllers/installable"
)

type Installable struct {
	InstallStub        func(context.Context, v1alpha1.InstallationConfig, installable.EventRecorder) (installable.Result, error)
	installMutex       sync.RWMutex
	installArgsForCall []struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
		arg3 installable.EventRecorder
	}
	installReturns struct {
		result1 installable.Result
		result2 error
	}
	installReturnsOnCall map[int]struct {
		result1 installable.Result
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Installable) Install(arg1 context.Context, arg2 v1alpha1.InstallationConfig, arg3 installable.EventRecorder) (installable.Result, error) {
	fake.installMutex.Lock()
	ret, specificReturn := fake.installReturnsOnCall[len(fake.installArgsForCall)]
	fake.installArgsForCall = append(fake.installArgsForCall, struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
		arg3 installable.EventRecorder
	}{arg1, arg2, arg3})
	stub := fake.InstallStub
	fakeReturns := fake.installReturns
	fake.recordInvocation("Install", []interface{}{arg1, arg2, arg3})
	fake.installMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Installable) InstallCallCount() int {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return len(fake.installArgsForCall)
}

func (fake *Installable) InstallCalls(stub func(context.Context, v1alpha1.InstallationConfig, installable.EventRecorder) (installable.Result, error)) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = stub
}

func (fake *Installable) InstallArgsForCall(i int) (context.Context, v1alpha1.InstallationConfig, installable.EventRecorder) {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	argsForCall := fake.installArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Installable) InstallReturns(result1 installable.Result, result2 error) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = nil
	fake.installReturns = struct {
		result1 installable.Result
		result2 error
	}{result1, result2}
}

func (fake *Installable) InstallReturnsOnCall(i int, result1 installable.Result, result2 error) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = nil
	if fake.installReturnsOnCall == nil {
		fake.installReturnsOnCall = make(map[int]struct {
			result1 installable.Result
			result2 error
		})
	}
	fake.installReturnsOnCall[i] = struct {
		result1 installable.Result
		result2 error
	}{result1, result2}
}

func (fake *Installable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Installable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ installable.Installable = new(Installable)
