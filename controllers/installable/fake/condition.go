// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/kyma-project/cfapi/api/v1alpha1"
	"github.com/kyma-project/cfapi/controllers/installable"
)

type Condition struct {
	IsMetStub        func(context.Context, v1alpha1.InstallationConfig) (bool, string)
	isMetMutex       sync.RWMutex
	isMetArgsForCall []struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
	}
	isMetReturns struct {
		result1 bool
		result2 string
	}
	isMetReturnsOnCall map[int]struct {
		result1 bool
		result2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Condition) IsMet(arg1 context.Context, arg2 v1alpha1.InstallationConfig) (bool, string) {
	fake.isMetMutex.Lock()
	ret, specificReturn := fake.isMetReturnsOnCall[len(fake.isMetArgsForCall)]
	fake.isMetArgsForCall = append(fake.isMetArgsForCall, struct {
		arg1 context.Context
		arg2 v1alpha1.InstallationConfig
	}{arg1, arg2})
	stub := fake.IsMetStub
	fakeReturns := fake.isMetReturns
	fake.recordInvocation("IsMet", []interface{}{arg1, arg2})
	fake.isMetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Condition) IsMetCallCount() int {
	fake.isMetMutex.RLock()
	defer fake.isMetMutex.RUnlock()
	return len(fake.isMetArgsForCall)
}

func (fake *Condition) IsMetCalls(stub func(context.Context, v1alpha1.InstallationConfig) (bool, string)) {
	fake.isMetMutex.Lock()
	defer fake.isMetMutex.Unlock()
	fake.IsMetStub = stub
}

func (fake *Condition) IsMetArgsForCall(i int) (context.Context, v1alpha1.InstallationConfig) {
	fake.isMetMutex.RLock()
	defer fake.isMetMutex.RUnlock()
	argsForCall := fake.isMetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Condition) IsMetReturns(result1 bool, result2 string) {
	fake.isMetMutex.Lock()
	defer fake.isMetMutex.Unlock()
	fake.IsMetStub = nil
	fake.isMetReturns = struct {
		result1 bool
		result2 string
	}{result1, result2}
}

func (fake *Condition) IsMetReturnsOnCall(i int, result1 bool, result2 string) {
	fake.isMetMutex.Lock()
	defer fake.isMetMutex.Unlock()
	fake.IsMetStub = nil
	if fake.isMetReturnsOnCall == nil {
		fake.isMetReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
		})
	}
	fake.isMetReturnsOnCall[i] = struct {
		result1 bool
		result2 string
	}{result1, result2}
}

func (fake *Condition) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Condition) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ installable.Condition = new(Condition)
