name: Release Draft Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: [ ubuntu-latest ]

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: v1.60
          args: --timeout=10m

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        id: version

      - name: docker build (broker)
        run: VERSION=${{ steps.version.outputs.version }} make -C components/btp-service-broker docker-build

      - name: docker-push (broker)
        run: VERSION=${{ steps.version.outputs.version }} make -C components/btp-service-broker docker-push

      - name: prepare release artifacts (broker)
        run: VERSION=${{ steps.version.outputs.version }} make -C components/btp-service-broker release

      - name: docker build (operator)
        run: VERSION=${{ steps.version.outputs.version }} make docker-build

      - name: docker-push (operator)
        run: VERSION=${{ steps.version.outputs.version }} make docker-push

      - name: prepare release artifacts
        run: |
          VERSION=${{ steps.version.outputs.version }} make release

      - name: Create draft release
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          gh release create "${VERSION}" --title "CFAPI Kyma Module" --draft --notes-file RELEASE.md

      - name: Upload release artifacts
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          gh release upload "${VERSION}" "./release-${VERSION}/cfapi-default-cr.yaml"
          gh release upload "${VERSION}" "./release-${VERSION}/cfapi-manager.yaml"
